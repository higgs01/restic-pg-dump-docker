name: Build and Deploy
on:
  push:
    branches: [ "master" ]
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: "Read Git Info"
      id: "git_info"
      uses: YunaBraska/git-info-action@main

      # CONFIGS (Optional)
      with:
        workDir: '.'
        ignore-files: '.java, .groovy, .jar'
        branch-fallback: 'main'
        tag-fallback: '0.0.1'
        tag-match-pattern: 'v1.*'
        fallback-commit-type: 'chore'
        fallback-commit-scope: 'performance'
        commit-msg-with-footer: 'true'
        max-changelog-length: 200
    
        # PRINT
    - name: "Print Git Info"
      run: |
        echo "is_git_repo          [${{ steps.git_info.outputs.is_git_repo }}]"
        echo "tag_latest           [${{ steps.git_info.outputs.tag_latest }}]"
        echo "sha_latest           [${{ steps.git_info.outputs.sha_latest }}]"
        echo "sha_latest_tag       [${{ steps.git_info.outputs.sha_latest_tag }}]"
        echo "branch               [${{ steps.git_info.outputs.branch }}]"
        echo "branch_default       [${{ steps.git_info.outputs.branch_default }}]"
        echo "has_changes          [${{ steps.git_info.outputs.has_changes }}]"
        echo "has_local_changes    [${{ steps.git_info.outputs.has_local_changes }}]"
        echo "has_breaking_changes [${{ steps.git_info.outputs.has_breaking_changes }}]"
        echo "commit_types         [${{ steps.git_info.outputs.commit_types }}]"
        echo "commit_scopes        [${{ steps.git_info.outputs.commit_scopes }}]"
        echo "change_log           [${{ steps.git_info.outputs.change_log }}]"
        echo "change_log_type_feat [${{ steps.git_info.outputs.change_log_type_feat }}]"
        echo "ticket_numbers       [${{ steps.git_info.outputs.ticket_numbers }}]"
        echo "x_has_changes_python [${{ steps.git_info.outputs.x_has_changes_python }}]"
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v6.10.0
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
